<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="CartProxyEndpoint">
    <Description>Cart Proxy V1</Description>
	 <PostClientFlow name="PostClientFlow">
	<Response>
		<!-- Non Production Logging -->
		<Step>
			<Condition>(ELFEndpointType != "SaaSProd") and (ELFEndpointType != "OnPremProd")</Condition>
			<Name>cf_ELFLog_NonProd</Name>
		</Step>

		<!-- SaaS Production Logging -->
		<Step>
			<Condition>(ELFEndpointType = "SaaSProd")</Condition>
			<Name>cf_ELFLog_SaaS_Prod</Name>
		</Step>

		<!-- OnPrem Production Logging -->
		<Step>
			<Condition>(ELFEndpointType = "OnPremProd")</Condition>
			<Name>cf_ELFLog_OnPrem_Prod</Name>
		</Step>
		
		<!-- OnPrem Non Production Logging -->
		<Step>
			<Condition>(ELFEndpointType = "OnPremNonProd")</Condition>
			<Name>cf_ELFLog_OnPrem_NonProd</Name>
		</Step>
	</Response>
</PostClientFlow>

	<FaultRules>
			
        <!-- Fault handling for 
			1. Fault from cf_RaiseFaultRedirectToFaultHandling policy
			2. Fault from other than raise fault policies 
		-->
        <FaultRule name="FaultHandling">
            <Condition>(raisefault.failed is null) or (!(raisefault.cf_RaiseFaultRedirectToFaultHandling is null))</Condition>
            <Step>
                <Condition>(!(apiError JavaRegex &quot;(?s).*userMessage.*&quot;))</Condition>
                <Name>cf_AssignDummyAPIError</Name>
            </Step>
            <Step>
                <Name>cf_AssignErrorRespMessage</Name>
            </Step>
            <Step>
                <Condition>(!(apiError JavaRegex &quot;(?s).*userMessage.*&quot;))</Condition>
                <Name>cf_ParseFaultHandler</Name>
            </Step>
            <Step>
                <Name>cf_ExtractErrorDetails</Name>
            </Step>
            <Step>
                <Condition>!(request.header.Accept JavaRegex ".*xml*.*")</Condition>
                <Name>cf_AssignAPIErrorToRespMessage</Name>
            </Step>
            <Step>
                <Condition>!(request.header.Accept JavaRegex ".*xml*.*")</Condition>
                <Name>cf_AssignDummyErrorObjXSL</Name>
            </Step>
            <Step>
                <Condition>!(request.header.Accept JavaRegex ".*xml*.*")</Condition>
                <Name>cf_errorXMLtoJSON</Name>
            </Step>
            <Step>
                <Condition>!(request.header.Accept JavaRegex ".*xml*.*")</Condition>
                <Name>cf_CleanupErrJsonPayload</Name>
            </Step>
			<!-- Capture log details -->
            <Step>
                <Name>cf_elf_AssignProxyError</Name>
            </Step>
			<!-- Remove line breaks -->
            <Step>
                <Name>cf_CleanupELFLog</Name>
            </Step>		
            <Step>
                <Name>cf_FaultErrorXMLResponse</Name>
            </Step>
        </FaultRule>

	</FaultRules>
	
	<DefaultFaultRule>
		
	</DefaultFaultRule>
    
	<PreFlow name="PreFlow">
	
		<Request>
			<!-- proxy_preflow_request -->
            <!-- ** Internal facade call:  In our samples below, virtualhost.name = secure is facade.  virtualhost.name = default is non-facade -->
            <Step>
                <Name>cf_SpikeArrest</Name>
            </Step>
      
            <Step>
                <Condition>(request.header.Authorization JavaRegex &quot;Basic.*&quot;)</Condition>
                <Name>DecodeBaseAuthHeaders</Name>
            </Step>
            
             <Step>
                 <Condition>(request.header.Authorization JavaRegex &quot;Basic.*&quot;)</Condition>
                <Name>VerifyAPIKey</Name>
            </Step>
           
            <!-- Oauth session validation -->
            <Step>
                <!-- Below code need to uncommented once Apigee provides secured internal calls 
                    <Condition>virtualhost.name != "secure"</Condition>
                -->
                <Condition>verifyapikey.VerifyAPIKey.basicAuthOnly == null or verifyapikey.VerifyAPIKey.basicAuthOnly != 'true'</Condition>
                <Name>cf_ValidateToken</Name>
            </Step>
            <!-- Initialize proxy local variables 
                1. Extract all query parameters in to queryparams.<<lower case param. name>> variable
                2. Extract all headers in to headers.<<lower case header name>>  and <<lower case header name>> variable
                3. Moved below policy assignments
                    A. Assign Static 
                    B. Assign Values From Header
                    C. Assign Values From Token
                4. Payload will not be parsed at this time
            -->
            <Step>
                <Name>cf_JS.Initialize</Name>
            </Step>
			
            <Step>
                <Name>cf_ratelimit_quota_transaction</Name>
            </Step>
			
			<Step>
                <Name>cf_RetrieveProdOrgEnvs</Name>
            </Step>
			<Step>
                <Name>cf_JS.AssignProdOrgEnvs</Name>
            </Step>
            <!-- +threat protection policies BEGIN -->
            <Step>
                <Condition>(isThreatCheckRequired == "true") and (request.header.internal != "true")</Condition>
                <Name>cf_JSONThreatProtection.DoSAEvaluation</Name>
            </Step>
            <Step>
                <Condition>(isThreatCheckRequired == "true") and (request.header.internal != "true")</Condition>
                <Name>cf_XMLThreatProtection.DoSAEvaluation</Name>
            </Step>
             <!-- Commented following 3 security policies as part of #33676 and #34654-->
     <!--   <Step>
                <Condition>(isThreatCheckRequired == "true") and (request.header.internal != "true")</Condition>
                <Name>cf_JS.SQLInjectionEvaluation</Name>
            </Step> -->
            <Step>
                <Condition>(isThreatCheckRequired == "true") and (request.header.internal != "true")</Condition>
                <Name>cf_JS.ServerSideIncludeInjectionEvaluation</Name>
            </Step>
     <!--   <Step>
                <Condition>(isThreatCheckRequired == "true") and (request.header.internal != "true")</Condition>
                <Name>cf_JS.JavaScriptInjectionEvaluation</Name>
            </Step>
            <Step>
                <Condition>(isThreatCheckRequired == "true") and (request.header.internal != "true")</Condition>
                <Name>cf_JS.XPathSyntaxInjectionEvaluation</Name>
            </Step> -->
            <Step>
                <Condition>((threatProtectionEvaluationStatus == "failed") and (capi.virtualhost.name != "secure"))</Condition>
                <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
            </Step>
            <!-- set static values like originalVerb -->
            <!--<Step>
                <Name>cf_AssignStatic</Name>
            </Step>-->
            <!-- extract authZ variables from HTTP header -->

    <!--    
    		<Step>
                <Condition>(virtualhost.name == "secure")</Condition>
                <Name>cf_AssignValuesFromHeader</Name>
            </Step> 
	-->

            <!-- extract authZ variables from TOKEN & HTTP header -->
   <!--     <Step>
                <Name>cf_AssignValuesFromToken</Name>
            </Step>
	-->
		</Request>

		<Response>
			
		</Response>
	
    </PreFlow>

    <Flows>

		
        <Flow name="getCart"> 
                        <!-- getCart Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>getCart_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

				               <!--  Capture current Flow name for logging -->
            	<Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>getCart_ExtractVariable</Name>
                </Step>
                <!--  For GET operation set dummy XML request content for XSL transformation to work -->
                <Step>
                    <Name>cf_AssignGETRequestPayload</Name>
                </Step>
               <!--  Input data validation using XSLT -->
                <Step>
                    <FaultRules/>
                    <Name>getCart_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>getCart_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>getCart_AssignRoutingVariable</Name>
                </Step>

			</Request>
			 <!-- getCart Response Flow -->
            <Response>
                <!--  XSLT Target to Proxy Response Transformation -->
                <Step>
                	<Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>getCart_ProxyResponseXSL</Name>
                </Step>
                <Step>
				    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
					<Name>getCart_JSON_ProxyResponseXSL</Name>
				</Step>
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
			<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}&quot;) and (capi.request.verb = &quot;GET&quot;)</Condition>
        </Flow>
		
        <Flow name="createCart"> 
                        <!-- createCart Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>createCart_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

				                
                <!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  JSON to XML transformation if content type is not text/xml -->         
                <Step>
                	<Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>createCart_ExtractVariable</Name>
                </Step>  
                
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>createCart_DataValidation</Name>
                </Step>              
                
                <!-- Raise fault for Content Type issue -->            
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                
                <!-- GetFinancialAccountDetails Request using XSLT -->
                 <Step>
                   <Condition>(cartItemTransactionType = &quot;REFILL&quot;) and (msisdn isNot null and msisdn != '')</Condition>
                   <Name>createCart_GetFinancialAccountDetails_RequestXSL</Name>                  
                </Step>
                
                <!-- Get Ericsson auth token -->
                 <Step>
                   <Condition>(cartItemTransactionType = &quot;REFILL&quot;) and (msisdn isNot null and msisdn != '')</Condition>
                   <Name>cf_RetrieveEricssonAuth</Name>                  
                </Step>
                
                 <!-- GetFinancialAccountDetails Service CallOut for TITAN -->
                 <Step>
                  	<Condition>(cartItemTransactionType = &quot;REFILL&quot;) and (msisdn isNot null and msisdn != '') and (capi.dc.system = "TITAN")</Condition>
                   <Name>createCart_GetFinancialAccountDetailsService_TITAN</Name>                  
                 </Step>
                 
                 <!-- GetFinancialAccountDetails Service CallOut for POLARIS -->
                 <Step>
                   <Condition>(cartItemTransactionType = &quot;REFILL&quot;) and (msisdn isNot null and msisdn != '') and (capi.dc.system = "POLARIS")</Condition>
                   <Name>createCart_GetFinancialAccountDetailsService_POLARIS</Name>                  
                 </Step>
                 
                 <!-- GetFinancialAccountDetails Response Validation -->
                 <Step>
                 	<Condition>((getFinancialAccountDetailsResponse.content JavaRegex "(?s).*code=.10[2,3,4].*") or (getFinancialAccountDetailsResponse.content JavaRegex "(?s).*serviceStatusCode.10[2,3,4].*") or (getFinancialAccountDetailsResponse.content JavaRegex "(?s).*faultcode.*"))</Condition>  
                   <Name>createCart_GetFinancialAccountDetails_ResponseValidation</Name>                  
                 </Step> 
                                     
                   <!-- Raise fault for Content Type issue -->            
                 <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                
                <!--GetFinancialAccountDetails Extract path/query param variables -->
                <Step>
                  	<Condition>(cartItemTransactionType = &quot;REFILL&quot;) and (msisdn isNot null and msisdn != '')</Condition>
                    <Name>createCart_GetFinancialAccountDetailsExtractVariable</Name>
                </Step> 
                
                <!-- extract supervisorId and transactionId if present in payload. This is for Manager Override. -->
                <Step>
                    <Name>updateCart_getSuperVisorIdXSL</Name>
                </Step>
                <Step>
                    <Name>parseSupervisorList</Name>
                </Step>
                <!-- 38274 - update Cart Payload to copy the Plan CartItem  'network resource' elements to CartItems(Device/SimCard and Device) which has the same parentrootcartid of Plan CartItem -->
                <Step>
                	<Condition>(applicationid JavaRegex ".*REBELLION.*")</Condition>
                    <Name>createCart_UpdateRequestXSL</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>createCart_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>createCart_AssignRoutingVariable</Name>
                </Step>
			</Request>
			<!-- createCart Response Flow -->
            <Response>
                <!--  XSLT Target to Proxy Response Transformation -->
                <Step>
                    <Name>createCart_ProxyResponseXSL</Name>
                </Step>
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
			<Condition>(proxy.pathsuffix MatchesPath &quot;/&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
        </Flow>
    	
    	<Flow name="searchCart"> 
    		<!-- searchCart Request Flow --> 
    		<Request>
    			<!--  Extract request path definition variable -->
    			<Step>
    				<Name>searchCart_AssignRequestPathDefinition</Name>
    			</Step>			
    			                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

    							<!--  Extract path/query param variables -->
                
                <!--  JSON to XML transformation if content type is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>searchCart_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue --> 
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>searchCart_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>searchCart_AssignRoutingVariable</Name>
                </Step>
    		</Request>
    		<!-- createCart Response Flow -->
            <Response>
                <!--  XSLT Target to Proxy Response Transformation -->
                <Step>
                   <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>searchCart_JSON_ProxyResponseXSL</Name>
                </Step>
                 <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>searchCart_ProxyResponseXSL</Name>
                </Step>
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
    		<Condition>(proxy.pathsuffix MatchesPath &quot;/search&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
    	</Flow>
    	
    	<Flow name="generateCartQuotation"> 
    		<!-- generateCartQuotation Request Flow --> 
    		<Request>
    			<!--  Extract request path definition variable -->
    			<Step>
    				<Name>generateCartQuotation_AssignRequestPathDefinition</Name>
    			</Step>			
    			                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

    			                <!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!-- Convert JSON to XML -->
                <Step>
                    <Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>generateCartQuotation_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
				<!-- extract supervisorId and transactionId if present in payload. This is for Manager Override. -->
                <Step>
                    <Name>updateCart_getSuperVisorIdXSL</Name>
                </Step>
                <Step>
                    <Name>parseSupervisorList</Name>
                </Step>
                <!-- 38274 - update Cart Payload to copy the Plan CartItem  'network resource' elements to CartItems(Device/SimCard and Device) which has the same parentrootcartid of Plan CartItem -->
                <Step>
                	<Condition>(applicationid JavaRegex ".*REBELLION.*")</Condition>
                    <Name>generateCartQuotation_UpdateRequestXSL</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>generateCartQuotation_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>generateCartQuotation_AssignRoutingVariable</Name>
                </Step>

    		</Request>
    					<!-- generateCartQuotation Response Flow -->
            <Response>
            	<!--  XSLT Target to Proxy Response Transformation -->
                <Step>                    
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>generateCartQuotation_ProxyResponseXSL</Name>
                </Step>
                <Step>
				    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
					<Name>generateCartQuotation_JSON_ProxyResponseXSL</Name>
				</Step>
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
    		<Condition>(proxy.pathsuffix MatchesPath &quot;/quotation&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
    	</Flow>
    	
        <Flow name="updateCart"> 
                        <!-- updateCart Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>updateCart_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

				               <!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>updateCart_ExtractVariable</Name>
                </Step>
                <!-- Convert JSON to XML -->
                <Step>
                    <Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>updateCart_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>           
                 
                <!-- extract supervisorId and transactionId if present in payload. This is for Manager Override. -->
                <Step>
                    <Name>updateCart_getSuperVisorIdXSL</Name>
                </Step>
                <Step>
                    <Name>parseSupervisorList</Name>
                </Step>
                <!-- 38274 - update Cart Payload to copy the Plan CartItem  'network resource' elements to CartItems(Device/SimCard and Device) which has the same parentrootcartid of Plan CartItem -->
                <Step>
                    <Name>updateCart_UpdateRequestXSL</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>updateCart_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>updateCart_AssignRoutingVariable</Name>
                </Step>

			</Request>
			<!-- updateCart Response Flow -->
            <Response>
            	<!--  XSLT Target to Proxy Response Transformation -->
            	 <Step>
                	<Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>updateCart_ProxyResponseXSL</Name>
                </Step>
                <Step>
				    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
					<Name>updateCart_JSON_ProxyResponseXSL</Name>
				</Step>               
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
			<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
        </Flow>
		
        <Flow name="createCartItem"> 
                        <!-- createCartItem Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>createCartItem_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

				                <!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  JSON to XML transformation if content type is not text/xml -->  
                <Step>
                    <Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>createCartItem_ExtractVariable</Name>
                </Step>  
                <!--  For GET operation set dummy XML request content for XSL transformation to work -->
                <!--Step>
                    <Name>cf_AssignGETRequestPayload</Name>
                </Step-->
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>createCartItem_DataValidation</Name>
                </Step>
                <!-- Validate CartId and CartItemId -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- extract supervisorId and transactionId if present in payload. This is for Manager Override. -->
                <Step>
                    <Name>updateCart_getSuperVisorIdXSL</Name>
                </Step>
                <Step>
                    <Name>parseSupervisorList</Name>
                </Step>
                  <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>createCartItem_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>createCartItem_AssignRoutingVariable</Name>
                </Step>

			</Request>
			<Response>
				<!--  XSLT Target to Proxy Response Transformation -->
                <Step>
                    <Name>createCartItem_ProxyResponseXSL</Name>
                </Step>
                
                <Step>
                    <Name>createCartItem_Extract-CartItem</Name>
                </Step>
                <Step>
                    <Name>createCartItem_AssignResponseMessage</Name>
                </Step>
</Response>
			<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/cartitem&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
        </Flow>
		
        <Flow name="updateCartItem"> 
                        <!-- updateCartItem Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>updateCartItem_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

				                <!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>updateCartItem_ExtractVariable</Name>
                </Step>
                <!--  Convert JSON to XML -->
                <Step>
                   <Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                 <!--  For GET operation set dummy XML request content for XSL transformation to work -->
                <!--Step>
                    <Name>cf_AssignGETRequestPayload</Name>
                </Step-->
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>updateCartItem_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- extract supervisorId and transactionId if present in payload. This is for Manager Override. -->
                <Step>
                    <Name>updateCart_getSuperVisorIdXSL</Name>
                </Step>
                <Step>
                    <Name>parseSupervisorList</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>updateCartItem_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>updateCartItem_AssignRoutingVariable</Name>
                </Step>

			</Request>
			
			<!-- updateCartItem Response Flow -->            

            <Response>
                <Step>
                    <FaultRules/>
                    <Name>Assign-Update-CartItem-Response</Name>
                </Step>
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>

                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>

                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>

                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>

            </Response>

			<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/cartitem/{cartItemId}&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
        </Flow>
		
        <Flow name="deleteCartItem"> 
                        <!-- deleteCartItem Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>deleteCartItem_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

				                <!--  Capture current Flow name for logging -->
            	<Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>deleteCartItem_ExtractVariable</Name>
                </Step>
                <!--  For GET operation set dummy XML request content for XSL transformation to work -->
                <Step>
                    <Name>cf_AssignGETRequestPayload</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <FaultRules/>
                    <Name>deleteCartItem_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue --> 
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>deleteCartItem_TargetRequestXSL</Name>
                </Step>
                
                <!--  Input data validation using XSLT -->
                <!--     <Step>
                    <Name>deleteCartItem_DataValidation</Name>
                </Step>
             -->
                <!--  Input XML validation using XSD -->
                <!--    <Step>
                    <Name>deleteCartItem_InputValidation</Name>
                </Step>                
            -->
                <!--  XSLT Proxy to Target Request Transformation -->
                <!--  <Step>
                    <Name>deleteCartItem_TargetRequestXSL</Name>
                </Step> -->
                <!--  Set Route Varibles -->
                <Step>
                    <Name>deleteCartItem_AssignRoutingVariable</Name>
                </Step>

			</Request>
			
			<!-- deleteCartItem Response Flow -->            

            <Response>

                <!--  XSLT Target to Proxy Response Transformation -->
           <!--     <Step>
                    <Name>deleteCartItem_ProxyResponseXSL</Name>
                </Step>
           -->
           
           
           		<Step>
                    <FaultRules/>
                    <Name>deleteCartItem_AssignResponseMessage</Name>
                </Step>

                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>

                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>

                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>

                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>

            </Response>

			<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/cartitem/{cartItemId}&quot;) and (capi.request.verb = &quot;DELETE&quot;)</Condition>
        </Flow>
		
        <Flow name="updateCartStatus"> 
                        <!-- updateCartStatus Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>updateCartStatus_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

				                <!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
				
				 <!--  Extract path/query param variables -->
                <Step>
                    <Name>updateCartStatus_ExtractVariable</Name>
                </Step>	
				<!--  JSON to XML transformation if content type is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Content-Type JavaRegex ".*xml.*"))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                <!--  Input data validation using XSLT -->           
                <Step>
                    <Name>updateCartStatus_DataValidation</Name>
                </Step>  
                <!-- Raise fault for Content Type issue -->        
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>updateCartStatus_TargetRequestXSL</Name>
                </Step>  
                <!--  Set Route Varibles -->
                <Step>
                    <Name>updateCartStatus_AssignRoutingVariable</Name>
                </Step>
			</Request>
			<Response>
                <Step>
                    <FaultRules/>
                    <Name>updateCartStatus_AssignRoutingResponse</Name>
                </Step>
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
			<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/status&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
        </Flow>
		
        <Flow name="getCartStatus"> 
                        <!-- getCartStatus Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>getCartStatus_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

								<!--  Capture current Flow name for logging -->
				<Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <FaultRules/>
                    <Name>getCartStatus_ExtractVariable</Name>
                </Step>
                <!--  For GET operation set dummy XML request content for XSL transformation to work -->
                <Step>
                    <Name>cf_AssignGETRequestPayload</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <FaultRules/>
                    <Name>getCartStatus_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <FaultRules/>
                    <Name>getCartStatus_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>getCart_AssignRoutingVariable</Name>
                </Step>

			</Request>
			 <Response>
 				<!--  XSLT Target to Proxy Response Transformation -->
                <Step>
                    <FaultRules/>
                    <Name>getCartStatus_ProxyResponseXSL</Name>
                </Step>
                <!--  XML to JSON transformation if Accept header is not text/xml  -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
			<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/status&quot;) and (capi.request.verb = &quot;GET&quot;)</Condition>
        </Flow>
		
        <Flow name="getShippingOptions"> 
                        <!-- getShippingOptions Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>getShippingOptions_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

								<!--  Capture current Flow name for logging -->            
            	<Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>getShippingOptions_ExtractVariable</Name>
                </Step>
                <!--  For GET operation set dummy XML request content for XSL transformation to work -->
                <Step>
                    <Name>cf_AssignGETRequestPayload</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <FaultRules/>
                    <Name>getShippingOptions_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>getShippingOptions_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>getShippingOptions_AssignRoutingVariable</Name>
                </Step>

			</Request>
			 		<Response>
                
                <!--  XSLT Target to Proxy Response Transformation -->
                <Step>
                    <Name>getShippingOptions_ProxyResponseXSL</Name>
                </Step>
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
			<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/shippingoption&quot;) and (capi.request.verb = &quot;GET&quot;)</Condition>
        </Flow>
		
        <Flow name="getCartItem"> 
                        <!-- getCartItem Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>getCartItem_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

				                <!--  Capture current Flow name for logging -->
            	<Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>getCartItem_ExtractVariable</Name>
                </Step>
                <!--  For GET operation set dummy XML request content for XSL transformation to work -->
                <Step>
                    <Name>cf_AssignGETRequestPayload</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <FaultRules/>
                    <Name>getCartItem_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue --> 
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>getCartItem_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>getCartItem_AssignRoutingVariable</Name>
                </Step>

			</Request>
			 			<!-- getCartItem Response Flow -->
            <Response>
                 <!--  XSLT Target to Proxy Response Transformation -->
                <Step>
                	<Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>getCartItem_ProxyResponseXSL</Name>
                </Step>
                <Step>
				    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
					<Name>getCartItem_JSON_ProxyResponseXSL</Name>
				</Step>
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
			<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/cartitem&quot;) and (capi.request.verb = &quot;GET&quot;)</Condition>
        </Flow>
		
        <Flow name="getCartItemDetails"> 
                        <!-- getCartItemDetails Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>getCartItemDetails_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

				            	<!--  Capture current Flow name for logging -->
            	<Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>getCartItemDetails_ExtractVariable</Name>
                </Step>
                <!--  For GET operation set dummy XML request content for XSL transformation to work -->
                <Step>
                    <Name>cf_AssignGETRequestPayload</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <FaultRules/>
                    <Name>getCartItemDetails_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue --> 
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>getCartItemDetails_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>getCartItemDetails_AssignRoutingVariable</Name>
                </Step>

			</Request>
						<!-- getCartDetails Response Flow -->
            <Response>
                <!--  XSLT Target to Proxy Response Transformation -->
                <Step>
                    <Name>getCartItemDetails_ProxyResponseXSL</Name>
                </Step>
                <!--  XML to JSON transformation if Accept header is not text/xml  -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
			<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/cartitem/{cartItemId}&quot;) and (capi.request.verb = &quot;GET&quot;)</Condition>
        </Flow>
    	
    	<Flow name="updateBillingDetails"> 
                        <!-- updateBillingDetails Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>updateBillingDetails_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

	    						<!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>updateBillingDetails_ExtractVariable</Name>
                </Step>
                <!-- Convert JSON to XML -->
                <Step>
                    <Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>updateBillingDetails_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>updateBillingDetails_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>updateBillingDetails_AssignRoutingVariable</Name>
                </Step>

			</Request>
    						<Response>
				
                 <Step>
                    <Name>updateBillingDetails_Assign-Message-Response</Name>
                </Step>              
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
                </Response>
    		<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/billingdetails&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
    	</Flow>
		
		<Flow name="updateShippingDetails"> 
                        <!-- updateShippingDetails Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>updateShippingDetails_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

	    		                <!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>updateShippingDetails_ExtractVariable</Name>
                </Step>
                <!-- Convert JSON to XML -->
                <Step>
                    <Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>updateShippingDetails_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>updateShippingDetails_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>updateShippingDetails_AssignRoutingVariable</Name>
                </Step>

			</Request>
    					<!-- updateShippingDetails Response Flow -->
			<Response>
                  <Step>
                    <Name>updateShippingDetails_AssignRoutingResponse</Name>
                </Step>
             </Response>
    		<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/shippingdetails&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
    	</Flow>
    	
    	<Flow name="updatePPUdetails"> 
    		<!-- updateShippingDetails Request Flow --> 
    		<Request>
    			<!--  Extract request path definition variable -->
    			<Step>
    				<Name>updatePPUdetails_AssignRequestPathDefinition</Name>
    			</Step>			
    			                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

    			                <!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>updatePPUdetails_ExtractVariable</Name>
                </Step>
                <!-- Convert JSON to XML -->
                <Step>
                    <Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>updatePPUdetails_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->
                <Step>
                    <Name>updatePPUdetails_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>updatePPUdetails_AssignRoutingVariable</Name>
                </Step>

    		</Request>
    						<Response>
	                 <Step>
                 	   <Name>updatePPUdetails_AssignRoutingResponse</Name>
                	</Step>                               
                </Response>
    		<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/PPUdetails&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
    	</Flow>
    	
    	<Flow name="updatePaymentDetails"> 
                        <!-- updatePaymentDetails Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
					<Name>updatePaymentDetails_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

	    		                <!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>updatePaymentDetails_ExtractVariable</Name>
                </Step>
                <!--  JSON to XML transformation if content type is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                
                <Step>
                    <Name>updatePaymentDetails_InputValidation</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>updatePaymentDetails_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                 <!--  XSLT Proxy to Target Request Transformation -->           
                <Step>
                    <Name>updatePaymentDetails_TargetRequestXSL</Name>
                </Step>
                  <!--  Set Route Varibles -->
               <Step>
                    <Condition>((flow.cart.request.actionCode = "UPDATE_ORDER") or (flow.cart.request.actionCode = "INFLIGHT_SHIPUPDATE") or (flow.cart.request.actionCode = "INFLIGHT_PAYUPDATE") or (flow.cart.request.actionCode = "INFLIGHT_SHIPPAYUPDATE"))</Condition>
                    <Name>updatePaymentDetails_AssignRoutingVariable</Name>
                </Step>
                  <!--  Set Route Varibles -->
                 <Step>
                    <Condition>((flow.cart.request.actionCode = "CREATE_ORDER") or (flow.cart.request.actionCode = "SUSPEND_AND_CREATE"))</Condition>
                    <Name>createPaymentDetails_AssignRoutingVariable</Name>
                </Step>

			</Request>
    		 <Response>
                                             
               <!--  XSLT Target to Proxy Response Transformation -->
                <Step>
                    <Name>updatePaymentDetails_ProxyResponseXSL</Name>
                </Step>
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
    		<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/paymentdetails&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
    	</Flow>
    	
    	
    	<Flow name="reviewTax"> 
    		          <!-- reviewTax Request Flow --> 
			<Request>
                		<!--  Extract request path definition variable -->
                		<Step>
                			<Name>reviewTax_AssignRequestPathDefinition</Name>
                		</Step>			
				                <!-- Prepare keys (oauthToken, id, custInfo) for Entitlement Caches -->
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_converPathToLowerCase</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_LookupCacheForApiABFs</Name>
                </Step>
                <Step>
                    <Condition>disable.entitlements.flow != 'true'</Condition>
                    <Name>cf_assignEntitlementKeys</Name>
                </Step>
                <Step>
                    <Condition>((disable.entitlements.flow != 'true') and (apiError != "") and (isAppbasedOrBasicAuth == "false"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- call  user entitlements service and populate in cache -->
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_CreateEnterpriseUserCustomerEntitlementsServiceRequestJS</Name>
                </Step>
                <Step>
                    <Condition>isEntitlementCallRequired = 'true'</Condition>
                    <Name>cf_RetrieveTibcoAuth</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "TITAN")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_TITAN</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (capi.dc.system = "POLARIS")</Condition>
                    <Name>cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS</Name>
                </Step>
                
                <!-- compute User ABF list and populate in cache -->
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_ComputeUserABFListXSL</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false)</Condition>
                    <Name>cf_JS.createEntitlementJSON</Name>
                </Step>                
                <Step>
                    <Condition>(isEntitlementCallRequired = 'true') and (servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_TITAN.failed = false or servicecallout.cf_CallUserCustomerEnterpriseEntitlementsService_POLARIS.failed = false) and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_setEntitlementsToOAuthAttrib</Name>
                </Step>

                <!-- compute User permission -->
                

                <Step>
                	<Condition>(isEntitlementCheckRequired = 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_ComputeUserPermissionJS</Name>
                </Step>

                <!-- check if permission is there -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar != 'true') and !(apiError JavaRegex ".*userMessage.*")</Condition>
                    <Name>cf_AssignApiErrorRaiseFaultNotAuthorized</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and ((permissionVar != 'true') or (apiError JavaRegex ".*userMessage.*"))</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!-- Prepare Entitlement list based on ABF Domain/Resource -->
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true') and (userEntitlements isNot null and userEntitlements != '')</Condition>
                    <Name>cf_AssignEntitlementsResponseMessage</Name>
                </Step>
                <Step>
                    <Condition>(isEntitlementCheckRequired = 'true') and (permissionVar = 'true')</Condition>
                    <Name>cf_GetDomainEntitlements</Name>
                </Step>

				                <!--  Capture current Flow name for logging -->
                <Step>
                    <Name>cf_elf_AssignProxyReq</Name>
                </Step>
                <!--  Extract path/query param variables -->
                <Step>
                    <Name>reviewTax_ExtractVariable</Name>
                </Step>
                <!--  For GET operation set dummy XML request content for XSL transformation to work -->
                <!--<Step>
                    <Name>cf_AssignGETRequestPayload</Name>
                </Step>-->
                <!-- Convert JSON to XML -->
                <Step>
                    <Condition>(!(request.header.Content-Type JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_JSONtoXML</Name>
                </Step>
                <!--  Input data validation using XSLT -->
                <Step>
                    <Name>reviewTax_DataValidation</Name>
                </Step>
                <!-- Raise fault for Content Type issue -->
                <Step>
                    <FaultRules/>
                    <Condition>(apiError JavaRegex &quot;.*userMessage.*&quot;)</Condition>
                    <Name>cf_RaiseFaultRedirectToFaultHandling</Name>
                </Step>
                <!--  XSLT Proxy to Target Request Transformation -->               
                <Step>
                    <Name>reviewTax_TargetRequestXSL</Name>
                </Step>
                <!--  Set Route Varibles -->
                <Step>
                    <Name>reviewTax_AssignRoutingVariable</Name>
                </Step>

			</Request>
    		<Response>
				<!--  XSLT Target to Proxy Response Transformation -->                           
                <Step>
                    <Name>reviewTax_ProxyResponseXSL</Name>
                </Step> 
                <!--  XML to JSON transformation if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_XMLtoJSON</Name>
                </Step>
                <!--  JSON cleanup  if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_CleanupJsonPayload</Name>
                </Step>
                <!--  Assign JSON response if Accept header is not text/xml -->
                <Step>
                    <Condition>(!(request.header.Accept JavaRegex &quot;.*xml.*&quot;))</Condition>
                    <Name>cf_AssignProxyJSONResponse</Name>
                </Step>
                <!--  Assign XML response  if Accept header is  text/xml -->
                <Step>
                    <Condition>(request.header.Accept JavaRegex &quot;.*xml.*&quot;)</Condition>
                    <Name>cf_AssignXMLResponse</Name>
                </Step>
            </Response>
    		<Condition>(proxy.pathsuffix MatchesPath &quot;/{cartId}/taxes&quot;) and (capi.request.verb = &quot;POST&quot;)</Condition>
    	</Flow>
    	
    	
        
		
		<!-- ProxyEndpoint Common Flows  -->
        <Flow name="unknown-resource">
            <Request>
                <Step>
                    <Name>cf_Unknown_Resource</Name>
                </Step>
            </Request>
            <Response/>
        </Flow>			


	</Flows>

    <PostFlow name="PostFlow">
		<Request>
			
		</Request>

		<Response>
			
            <!-- statistics collector -->
            <!-- message logging -->
			<!-- Capture log details -->
            <Step>
                <Name>cf_elf_AssignProxyPostFlowResp</Name>
            </Step>
			<!-- Remove line breaks -->
            <Step>
                <Name>cf_CleanupELFLog</Name>
            </Step>

		</Response>
    </PostFlow>

    <HTTPProxyConnection>
        <BasePath>/v1/cart</BasePath>
		<VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>

    
			<!-- Target routing logic -->
			
			<RouteRule name="CartWSIL_POLARIS">
			  	<Condition>((capi.target.route.system = &quot;U2&quot;) and (capi.target.route.service = &quot;CartWSIL&quot;) and (capi.dc.system = "POLARIS"))</Condition>
			  	<TargetEndpoint>Ericsson_CartWSIL_POLARIS</TargetEndpoint>
			</RouteRule>
			
			<RouteRule name="CartWSIL_TITAN">
			  	<Condition>((capi.target.route.system = &quot;U2&quot;) and (capi.target.route.service = &quot;CartWSIL&quot;) and (capi.dc.system = "TITAN"))</Condition>
			  	<TargetEndpoint>Ericsson_CartWSIL_TITAN</TargetEndpoint>
			</RouteRule>
   			 
   			 <RouteRule name="Tibco_OrderCheckoutEnterprise_TITAN">
		         <Condition>((capi.target.route.system = &quot;U2&quot;) and (capi.target.route.service = &quot;OrderCheckoutEnterprise&quot;) and (capi.dc.system = "TITAN"))</Condition>
		       	 <TargetEndpoint>Tibco_OrderCheckoutEnterprise_TITAN</TargetEndpoint>
   			 </RouteRule>
   			 
   			 <RouteRule name="Tibco_OrderCheckoutEnterprise_POLARIS">
		         <Condition>((capi.target.route.system = &quot;U2&quot;) and (capi.target.route.service = &quot;OrderCheckoutEnterprise&quot;) and (capi.dc.system = "POLARIS"))</Condition>
		       	 <TargetEndpoint>Tibco_OrderCheckoutEnterprise_POLARIS</TargetEndpoint>
   			 </RouteRule>
   			 
   			 


</ProxyEndpoint>
